import { useState, useEffect } from 'react';
import { TextField, Button, Box, Typography } from '@mui/material';
import { Search as SearchIcon } from '@mui/icons-material';
import ClientCard from '../components/ClientCard';
import type { Client } from '../types';
import { getClients, updateClient, deleteClient } from '../services/clientService';
import AddClientForm from '../components/AddClientForm';

export default function ClientsPage() {
  const [clients, setClients] = useState<Client[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isAddFormOpen, setIsAddFormOpen] = useState(false);
  const [editingClient, setEditingClient] = useState<Client | null>(null);

  useEffect(() => {
    loadClients();
  }, []);

  const loadClients = async () => {
    const data = await getClients();
    setClients(data);
  };

  const filteredClients = clients.filter(client =>
    client.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    client.phone.includes(searchTerm) ||
    client.address.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleAddClient = () => {
    setIsAddFormOpen(true); // –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
  };

  const handleUpdateClient = async (id: string, updatedData: Partial<Client>) => {
    await updateClient(id, updatedData);
    loadClients();
  };

  const handleDeleteClient = async (id: string) => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞?')) {
      await deleteClient(id);
      loadClients();
    }
  };

  const handleEditClient = (client: Client) => {
    setEditingClient(client);
    setIsAddFormOpen(true);
  };

  return (
    <Box sx={{ p: 2 }}>
      <Typography variant="h4" gutterBottom>–ö–ª–∏–µ–Ω—Ç—ã</Typography>
      <Typography variant="body1" color="text.secondary" gutterBottom>
        –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≤—Å—Ç—Ä–µ—á.
      </Typography>

      <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
        <TextField
          fullWidth
          variant="outlined"
          placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, –∞–¥—Ä–µ—Å—É –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          InputProps={{
            startAdornment: <SearchIcon />,
          }}
        />
        <Button variant="contained" onClick={handleAddClient}>–î–æ–±–∞–≤–∏—Ç—å</Button>
      </Box>

      <Box sx={{ display: 'flex', gap: 1, mb: 1, borderBottom: '1px solid #ddd', pb: 1 }}>
        <Typography variant="caption" sx={{ flex: 1, textAlign: 'center' }}>–§–æ—Ç–æ</Typography>
        <Typography variant="caption" sx={{ flex: 1, textAlign: 'center' }}>–§–ò–û</Typography>
        <Typography variant="caption" sx={{ flex: 1, textAlign: 'center' }}>–¢–µ–ª–µ—Ñ–æ–Ω</Typography>
        <Typography variant="caption" sx={{ flex: 1, textAlign: 'center' }}>–ê–¥—Ä–µ—Å</Typography>
        <Typography variant="caption" sx={{ flex: 1, textAlign: 'center' }}>–î–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏</Typography>
        <Typography variant="caption" sx={{ flex: 1, textAlign: 'center' }}>–î–µ–π—Å—Ç–≤–∏—è</Typography>
      </Box>

      {filteredClients.length > 0 ? (
        filteredClients.map(client => (
          <ClientCard
            key={client.id!}
            client={client}
            onEdit={() => handleEditClient(client)} 
            onDelete={() => handleDeleteClient(client.id!)}
            onMarkCompleted={() => handleUpdateClient(client.id!, { status: 'completed' })}
            onMarkCancelled={() => handleUpdateClient(client.id!, { status: 'cancelled' })}
            onShowOnMap={() => {
              const address = client.address.trim();
              if (address) {
                const encoded = encodeURIComponent(address);
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
                window.open(`https://yandex.ru/maps/?text=${encoded}`, '_blank');
              } else {
                alert('–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω');
              }
            }}
            onShowRoute={() => {
              const address = client.address.trim();
              if (address) {
                const encoded = encodeURIComponent(address);
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ø–Ω–¥–µ–∫—Å.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä (–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ)
                const naviUrl = `yandexnavi://build_route_on_map?&lat=0&lon=0&to=${encoded}`;
                const mapsUrl = `https://yandex.ru/maps/?rtext=~${encoded}&rtt=auto`;

                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –∫–∞—Ä—Ç—ã
                const win = window.open(naviUrl, '_blank');
                if (!win || win.closed || win.outerHeight === 0) {
                  window.open(mapsUrl, '_blank');
                }
              } else {
                alert('–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω');
              }
            }}
          />
        ))
      ) : (
        <Typography variant="body2" align="center" sx={{ mt: 2 }}>
          –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.
        </Typography>
      )}
      
      <AddClientForm
        open={isAddFormOpen}
        onCancel={() => {
          setIsAddFormOpen(false);
          setEditingClient(null);
          // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
        }}
        onSave={() => {
          setIsAddFormOpen(false);
          setEditingClient(null);
          setSearchTerm(''); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
          loadClients();     // üëà –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        }}
        client={editingClient || undefined}
      />
    </Box>
  );
}